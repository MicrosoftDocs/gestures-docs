<Type Name="FingerPoseListExtension" FullName="Microsoft.Gestures.FingerPoseListExtension">
  <TypeSignature Language="C#" Value="public static class FingerPoseListExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FingerPoseListExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Gestures.FingerPoseListExtension" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Gestures</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Augments <see cref="T:System.Collections.Generic.ICollection`1" /> with extension methods that are a particularly useful shorthand for adding <see cref="T:Microsoft.Gestures.FingerPose" /> constraints to the
            <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> list of an existing <see cref="T:Microsoft.Gestures.HandPose" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, Microsoft.Gestures.Finger finger, Microsoft.Gestures.PoseDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, valuetype Microsoft.Gestures.Finger finger, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},Microsoft.Gestures.Finger,Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="finger" Type="Microsoft.Gestures.Finger" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="finger">The <see cref="T:Microsoft.Gestures.Finger" /> participating in the <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /><paramref name="finger" /> is required to be aligned with.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires <paramref name="finger" /> to be aligned with 
            <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when the index finger is pointing up
            handPose.PoseConstraints.Add(Finger.Index, PoseDirection.Up); 
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, Microsoft.Gestures.FingersContext fingersContext, Microsoft.Gestures.PoseDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, class Microsoft.Gestures.FingersContext fingersContext, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},Microsoft.Gestures.FingersContext,Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="fingersContext" Type="Microsoft.Gestures.FingersContext" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="fingersContext">Specifies the <see cref="T:Microsoft.Gestures.FingersContext" /> of the fingers participating in the <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /> that is required of the fingers indicated by <paramref name="fingersContext" />.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires the fingers indicated by
            <paramref name="fingersContext" /> to be aligned with <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when at least one of the thumb, index or middle fingers is pointing right
            handPose.PoseConstraints.Add(new AnyFingersContext(new[] {Finger.Thumb, Finger.Index, Finger.Middle}), PoseDirection.Right);
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, System.Collections.Generic.IEnumerable&lt;Microsoft.Gestures.Finger&gt; fingers, Microsoft.Gestures.PoseDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Gestures.Finger&gt; fingers, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},System.Collections.Generic.IEnumerable{Microsoft.Gestures.Finger},Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="fingers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Gestures.Finger&gt;" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="fingers">An enumeration of all the fingers that will participate in the <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /> each of the <paramref name="fingers" /> is required to be aligned with.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires each of the <paramref name="fingers" /> to be aligned 
            with <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when the thumb, index and middle fingers are all pointing left
            handPose.PoseConstraints.Add(new[] {Finger.Thumb, Finger.Index, Finger.Middle}, PoseDirection.Left);
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, Microsoft.Gestures.Finger finger, Microsoft.Gestures.FingerFlexion flexion, Microsoft.Gestures.PoseDirection direction = Microsoft.Gestures.PoseDirection.Undefined);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, valuetype Microsoft.Gestures.Finger finger, valuetype Microsoft.Gestures.FingerFlexion flexion, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},Microsoft.Gestures.Finger,Microsoft.Gestures.FingerFlexion,Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="finger" Type="Microsoft.Gestures.Finger" />
        <Parameter Name="flexion" Type="Microsoft.Gestures.FingerFlexion" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="finger">The <paramref name="finger" /> participating in the <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="flexion">The <see cref="T:Microsoft.Gestures.FingerFlexion" /> state (the degree to which a finger is open or folded) imposed on <paramref name="finger" />.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /><paramref name="finger" /> is required to be aligned with.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires <paramref name="finger" /> to attain the specified 
            <paramref name="flexion" /> state and be aligned with <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when the index finger is open and pointing backward
            handPose.PoseConstraints.Add(Finger.Index, FingerFlexion.Open, PoseDirection.Backward); 
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, Microsoft.Gestures.FingersContext fingersContext, Microsoft.Gestures.FingerFlexion flexion, Microsoft.Gestures.PoseDirection direction = Microsoft.Gestures.PoseDirection.Undefined);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, class Microsoft.Gestures.FingersContext fingersContext, valuetype Microsoft.Gestures.FingerFlexion flexion, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},Microsoft.Gestures.FingersContext,Microsoft.Gestures.FingerFlexion,Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="fingersContext" Type="Microsoft.Gestures.FingersContext" />
        <Parameter Name="flexion" Type="Microsoft.Gestures.FingerFlexion" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="fingersContext">Specifies the <see cref="T:Microsoft.Gestures.FingersContext" /> of the fingers participating in the <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="flexion">The <see cref="T:Microsoft.Gestures.FingerFlexion" /> state (the degree to which a finger is open or folded) imposed on the fingers indicated by <paramref name="fingersContext" />.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /> required of the fingers indicated by <paramref name="fingersContext" />.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires the fingers indicated by 
            <paramref name="fingersContext" /> to attain the specified <paramref name="flexion" /> state and to be aligned with the given <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when at least one of the thumb, index and middle fingers is folded
            handPose.PoseConstraints.Add(new AnyFingerContext(new[] {Finger.Thumb, Finger.Index, Finger.Middle}), FingerFlexion.Folded);
            </code>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt; poseConstraints, System.Collections.Generic.IEnumerable&lt;Microsoft.Gestures.Finger&gt; fingers, Microsoft.Gestures.FingerFlexion flexion, Microsoft.Gestures.PoseDirection direction = Microsoft.Gestures.PoseDirection.Undefined);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.ICollection`1&lt;class Microsoft.Gestures.PoseConstraint&gt; poseConstraints, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Gestures.Finger&gt; fingers, valuetype Microsoft.Gestures.FingerFlexion flexion, valuetype Microsoft.Gestures.PoseDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Gestures.FingerPoseListExtension.Add(System.Collections.Generic.ICollection{Microsoft.Gestures.PoseConstraint},System.Collections.Generic.IEnumerable{Microsoft.Gestures.Finger},Microsoft.Gestures.FingerFlexion,Microsoft.Gestures.PoseDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Gestures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poseConstraints" Type="System.Collections.Generic.ICollection&lt;Microsoft.Gestures.PoseConstraint&gt;" RefType="this" />
        <Parameter Name="fingers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Gestures.Finger&gt;" />
        <Parameter Name="flexion" Type="Microsoft.Gestures.FingerFlexion" />
        <Parameter Name="direction" Type="Microsoft.Gestures.PoseDirection" />
      </Parameters>
      <Docs>
        <param name="poseConstraints">An existing collection of <see cref="T:Microsoft.Gestures.PoseConstraint" /> objects, this will often be the <see cref="P:Microsoft.Gestures.HandPose.PoseConstraints" /> property.</param>
        <param name="fingers">An enumeration of all the fingers which will participate in the new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint.</param>
        <param name="flexion">The <see cref="T:Microsoft.Gestures.FingerFlexion" /> state (the degree to which a finger is open or folded) imposed on each of <paramref name="fingers" />.</param>
        <param name="direction">The <see cref="T:Microsoft.Gestures.PoseDirection" /> that each of <paramref name="fingers" /> is required to be aligned with.</param>
        <summary>
            Creates and adds to the <paramref name="poseConstraints" /> collection a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint which requires each of the <paramref name="fingers" /> to attain 
            the specified <paramref name="flexion" /> state and to be aligned with the given <paramref name="direction" />.
            </summary>
        <remarks>
          <para>This extension method is a handy way to augment an existing <see cref="T:Microsoft.Gestures.HandPose" /> with a new <see cref="T:Microsoft.Gestures.FingerPose" /> constraint:</para>
          <code>
            var handPose = new HandPose("MyPose");
            // will be satisfied when the thumb, index and middle fingers are all open and pointing down
            handPose.PoseConstraints.Add(new[] {Finger.Thumb, Finger.Index, Finger.Middle}, FingerFlexion.Open, PoseDirection.Down);
            </code>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>